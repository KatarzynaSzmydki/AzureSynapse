{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-ks-ws"
		},
		"ls_cosmos_db_nyc_taxi_data_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_cosmos_db_nyc_taxi_data'"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ks-ws-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-course-ks-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-ks-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ks-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_synapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourseksdl.dfs.core.windows.net/"
		},
		"synapse-course-ks-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourseksdl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_taxi_dwh')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Script Get Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;\nselect distinct year, month\nfrom silver.vw_trip_data_green;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month Gold",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Script Get Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Script Get Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Gold Trip Data",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Stored procedure Trip Data Gold",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Gold Trip Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Script Create Gold View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "Query",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Flders",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Flders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-28T10:02:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;\n"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/taxi_zone',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-27T18:11:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-27T18:18:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;\n\nselect distinct year, month from bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Trip",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Trip Data Year and Month",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Stored procedure Trip Year and Month",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Trip Data Year and Month",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Script Create Silver View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Trip",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "Query",
									"text": "DROP VIEW IF EXISTS silver.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\n\nFROM\n    OPENROWSET(\n        bulk '/silver/trip_data_green/year=*/month=*/*',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_all_pipelines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Create Silver Tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Silver trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Gold Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Create Silver Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Create Silver trip data green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_cosmos_db_nyc_taxi_data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('ls_cosmos_db_nyc_taxi_data_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ks-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-ks-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ks-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-ks-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_nyc_taxi_data_load')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execute_all_pipelines",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-03-28T16:42:00",
						"endTime": "2023-03-29T14:42:00",
						"timeZone": "Central European Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_execute_all_pipelines')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n;\n\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    with (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) ,\n        Zone VARCHAR(50) ,\n        service_zone VARCHAR(15)  \n    ) \n    AS [result]\n;\n\n\ncreate DATABASE nyc_taxi_discovery;\n\nuse nyc_taxi_discovery;\n\n\nselect name, collation_name from sys.databases; --checking collation\n\nalter DATABASE nyc_taxi_discovery collate Latin1_General_100_CI_AI_SC_UTF8; --setting collation for the whole datbase, not possible for master database\n\n\n\n--Column names\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    with (\n\n        Borough VARCHAR(15) 2,\n        Zone VARCHAR(50) 3\n    ) \n    AS [result]\n;\n\n\n\n\n-- create external Data Source\n\ncreate external data SOURCE nyc_taxi_data\nwith (\n    location = 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net/'\n)\n\n\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK '/raw/taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    with (\n\n        Borough VARCHAR(15) 2,\n        Zone VARCHAR(50) 3\n    ) \n    AS [result]\n;\n\n\n-- drop external data SOURCE nyc_taxi_data;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/raw/vendor.csv',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = True\n    ) AS [result]\n;\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/raw/vendor_escaped.csv',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = True,\n        ESCAPECHAR = '\\\\'\n    ) AS [result]\n;\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/raw/vendor.csv',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = True,\n        FIELDQUOTE = '\"'\n    ) AS [result]\n;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/raw/trip_type.tsv',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = True,\n        FIELDTERMINATOR = '\\t'\n    ) AS [trip_type]\n;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_explore_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\n-- less efficient than openjson\nSELECT \n    CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15) ) payment_type_desc\n\nFROM\n    OPENROWSET (\n        BULK '/raw/payment_type.json',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [payment_type]\n;\n\n\n\n-- OPENJSON\nSELECT \n   payment_type,\n   payment_type_desc\nFROM\n    OPENROWSET (\n        BULK '/raw/payment_type.json',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [payment_type]\n    CROSS APPLY OPENJSON(jsonDoc)\n    with (\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n;\n\n\n\n-- JSON WITH ARRAYS\n\nSELECT \n   payment_type,\n   sub_type,\n   payment_type_desc_value\nFROM\n    OPENROWSET (\n        BULK '/raw/payment_type_array.json',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [payment_type]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) AS JSON\n    )\n    CROSS APPLY OPENJSON(payment_type_desc)\n    WITH (\n        sub_type SMALLINT, \n        payment_type_desc_value VARCHAR(20) '$.value'\n    )\n;\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nuse nyc_taxi_discovery;\n\n\nSELECT \nrate_code_id,\nrate_code\n   \nFROM\n    OPENROWSET (\n        BULK '/raw/rate_code.json',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' --necessary\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [rate_code]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );\n\n\n\n\nSELECT \n    rate_code_id,\n    rate_code\nFROM\n    OPENROWSET (\n        BULK '/raw/rate_code_multi_line.json',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [rate_code]    \n    CROSS APPLY OPENJSON(jsonDoc)\n    with (\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nuse nyc_taxi_discovery;\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ('/raw/trip_data_green_csv/year=2020/month=01/**',\n        '/raw/trip_data_green_csv/year=2020/month=02/**'),\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = True\n    ) AS [trip_data_green_csv]\n;\n\n\n\n-- Use file path in the where clause\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n--WHERE result.filepath(1) = '2020'\n--  AND result.filepath(2) IN ('06', '07', '08')\nGROUP BY result.filename(), result.filepath(1), result.filepath(2)\nORDER BY result.filename(), result.filepath(1), result.filepath(2);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_explore_trip_data_parquet_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nuse nyc_taxi_discovery;\n\n\n-- parquet\nSELECT\n\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    count(*)\nFROM\n    OPENROWSET(\n        BULK '/raw/trip_data_green_parquet/year=*/month=*/*',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere result.filepath(1) = '2020'\nand result.filepath(2) in ('06','07')\ngroup by result.filepath(1), result.filepath(2)\n\n\n\n\n--delta -> parquet form but keeps transaction logs\n\nselect top 100 *\nFROM\n    OPENROWSET(\n        BULK '/raw/trip_data_green_delta/',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'DELTA'\n    ) AS [result]\n    where year = '2020'\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\n\nuse nyc_taxi_discovery;\n\n\n-- duplicates\n\nSELECT\n    location_id,\n    count(*) cnt\nFROM\n    OPENROWSET(\n        BULK '/raw/taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \nwith (\n    location_id SMALLINT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(15) 4\n)\n    AS [result]\ngroup by location_id\nHAVING COUNT(*) > 1\n;\n\n\n\n-- data quality issues\n\n\nSELECT\n    min(total_amount) min_total_amount,\n    max(total_amount) max_total_amount,\n    avg(total_amount) avg_total_amount,\n    count(1) as ttl_records,\n    count([total_amount]) as ttl_records_total_amount\n    \nFROM\n    OPENROWSET(\n        BULK '/raw/trip_data_green_parquet/year=*/month=*/*',\n        data_source = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere total_amount < 0\n;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n/*\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/trip_data_green',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.vw_trip_data_green_csv;\n\n\nselect top 10 * from silver.trip_data_green;\n*/\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\n\nFROM\n    OPENROWSET(\n        bulk '/silver/trip_data_green/year=*/month=*/*',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nGO\n\nSELECT TOP(100) *\n  FROM silver.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\n\nuse nyc_taxi_discovery;\n\n-- Number of trips made by duration in hours\n\n\n\nSELECT \n    DATEDIFF(HOUR, [start], [end]) time_diff,\n    count(*) trips\nFROM\n    OPENROWSET(\n        BULK '/raw/trip_data_green_parquet/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data'\n    ) --AS [trip_data_green_csv]\n    with (\n        \"start\" DATETIME2 '$.lpep_pickup_datetime',\n        \"end\" DATETIME2 '$.lpep_dropoff_datetime'\n    )\n    AS [trip_data_green_csv]\n    GROUP by  DATEDIFF(HOUR, [start], [end]) \n    order by count(*) desc\n;\n\n\n\n\n\n-- Assignment\n\nwith payment_type as (\n   SELECT \n   payment_type, description from\n    OPENROWSET(\n        BULK '/raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    )\n    WITH\n    (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        description VARCHAR(20) '$.payment_type_desc'\n    ) \n),\n\njoined_data as (\n\n    SELECT \n        trip_data_green.*,\n        taxi_zone.*,\n        payment_type.description\n    FROM\n        OPENROWSET(\n            BULK '/raw/trip_data_green_parquet/**',\n            FORMAT = 'PARQUET',\n            DATA_SOURCE = 'nyc_taxi_data'\n        ) AS [trip_data_green]\n        left JOIN\n        OPENROWSET(\n            BULK '/raw/taxi_zone.csv',\n            DATA_SOURCE = 'nyc_taxi_data',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '2.0',\n            HEADER_ROW = TRUE,\n            FIELDTERMINATOR = ',',\n            ROWTERMINATOR = '\\n'\n        ) AS  [taxi_zone]\n        on trip_data_green.PULocationID = taxi_zone.LocationID\n        left JOIN payment_type on payment_type.payment_type = trip_data_green.payment_type\n        ),\n\ngrp as (\n\n    SELECT\n    Borough,\n    count(*) total_trips,\n    sum( case when [description] = 'Cash' then 1 else 0 end) cash_trips,\n    sum( case when [description] = 'Credit card' then 1 else 0 end) card_trips\n\n    from joined_data\n    group by Borough\n)\n\nSELECT\nBorough,\ntotal_trips,\ncash_trips,\ncard_trips,\nround((cast(cash_trips as float)/cast(total_trips as float))*100,2) cash_trips_percentage,\nround((cast(card_trips as float)/cast(total_trips as float))*100,2) card_trips_percentage\nfrom grp\norder by Borough;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\nEXEC gold.usp_gold_trip_data_green '2020', '01';\nEXEC gold.usp_gold_trip_data_green '2020', '02';\nEXEC gold.usp_gold_trip_data_green '2020', '03';\nEXEC gold.usp_gold_trip_data_green '2020', '04';\nEXEC gold.usp_gold_trip_data_green '2020', '05';\nEXEC gold.usp_gold_trip_data_green '2020', '06';\nEXEC gold.usp_gold_trip_data_green '2020', '07';\nEXEC gold.usp_gold_trip_data_green '2020', '08';\nEXEC gold.usp_gold_trip_data_green '2020', '09';\nEXEC gold.usp_gold_trip_data_green '2020', '10';\nEXEC gold.usp_gold_trip_data_green '2020', '11';\nEXEC gold.usp_gold_trip_data_green '2020', '12';\nEXEC gold.usp_gold_trip_data_green '2021', '01';\nEXEC gold.usp_gold_trip_data_green '2021', '02';\nEXEC gold.usp_gold_trip_data_green '2021', '03';\nEXEC gold.usp_gold_trip_data_green '2021', '04';\nEXEC gold.usp_gold_trip_data_green '2021', '05';\nEXEC gold.usp_gold_trip_data_green '2021', '06';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result]\nGO\n\nSELECT distinct year, month\n  FROM gold.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use master \nGO\n\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw collate Latin1_General_100_BIN2_UTF8\n\n\nuse nyc_taxi_ldw \nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_ctas_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dwh"
				},
				"content": {
					"query": "\nCREATE SCHEMA staging\t\nGO\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'parquet_file_format') \n\tCREATE EXTERNAL FILE FORMAT parquet_file_format \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyc_taxi_data_src') \n\tCREATE EXTERNAL DATA SOURCE nyc_taxi_data_src\n\tWITH (\n\t\tLOCATION = 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE staging.ext_trip_data_green (\n\t[year] nvarchar(4000),\n\t[month] nvarchar(4000),\n\t[borough] nvarchar(4000),\n\t[trip_date] date,\n\t[trip_day] nvarchar(4000),\n\t[trip_day_weekend_ind] nvarchar(4000),\n\t[card_trip_count] int,\n\t[cash_trip_count] int,\n\t[street_hail_trip_count] int,\n\t[dispatch_trip_count] int,\n\t[trip_distance] float,\n\t[trip_duration] int,\n\t[fare_amount] float\n\t)\n\tWITH (\n\tLOCATION = 'gold/trip_data_green',\n\tDATA_SOURCE = nyc_taxi_data_src,\n\tFILE_FORMAT = parquet_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM staging.ext_trip_data_green\nGO\n\n\n\nCREATE SCHEMA dwh\t\nGO\n\nCREATE TABLE dwh.ext_trip_data_green\nwith (\n\tCLUSTERED COLUMNSTORE INDEX,\n\tDISTRIBUTION = ROUND_ROBIN\n)\nAS SELECT * FROM staging.ext_trip_data_green",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_dwh",
						"poolName": "nyc_taxi_dwh"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_synapse_link_query_heartbeat_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "synapse_link"
				},
				"content": {
					"query": "IF (NOT EXISTS(SELECT * FROM sys.credentials WHERE name = 'synapse-course-cosmos-db-ks'))\n    CREATE CREDENTIAL [synapse-course-cosmos-db-ks]\n    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = '9XU85ZzDnLyUsQuzWBeJ0gxlxloFImVSTxDEpEc6x6OnR2IIDr5YCzMXV59NMd4fnbFv533LjPP0ACDbU54aag=='\nGO\n\nSELECT TOP 100 *\nFROM OPENROWSET(​PROVIDER = 'CosmosDB',\n                CONNECTION = 'Account=synapse-course-cosmos-db-ks;Database=nyctaxidb',\n                OBJECT = 'Heartbeat',\n                SERVER_CREDENTIAL = 'synapse-course-cosmos-db-ks'\n) AS [Heartbeat]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT [VendorID] AS vendor_id\n                ,[lpep_pickup_datetime]\n                ,[lpep_dropoff_datetime]\n                ,[store_and_fwd_flag]\n                ,[total_amount]\n                ,[payment_type]\n                ,[trip_type]\n                ,[congestion_surcharge]\n                ,[extra]\n                ,[mta_tax]\n                ,[tip_amount]\n                ,[tolls_amount]\n                ,[ehail_fee]\n                ,[improvement_surcharge]\n                ,[RatecodeID] AS rate_code_id\n                ,[PULocationID] AS pu_location_id\n                ,[DOLocationID] AS do_location_id\n                ,[passenger_count]\n                ,[trip_distance]\n                ,[fare_amount]\n        FROM bronze.vw_trip_data_green_csv\n        WHERE year = ''' + @year + '''\n          AND month = ''' + @month + '''';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_datasources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name='nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    with (\n        LOCATION = 'https://synapsecourseksdl.dfs.core.windows.net/nyc-taxi-data'\n    );\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n            cal.day_name AS trip_day,\n            CASE WHEN cal.day_name IN (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n            SUM(CASE WHEN pt.payment_type_desc = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n            SUM(CASE WHEN pt.payment_type_desc = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS dispatch_trip_count ,\n            SUM(td.trip_distance) AS trip_distance,\n            SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n            SUM(td.fare_amount) AS fare_amount\n        FROM silver.vw_trip_data_green td\n        JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n        JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n        JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt ON (td.trip_type = tt.trip_type)\n        WHERE td.year = ''' + @year + '''\n          AND td.month = ''' + @month + '''\n        GROUP BY td.year,\n                td.month,\n                tz.borough,\n                CONVERT(DATE, td.lpep_pickup_datetime),\n                cal.day_name  ';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n\n-- csv parser 2\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name='csv_file_format')\n  CREATE EXTERNAL FILE FORMAT csv_file_format  \n    WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (  \n          FIELD_TERMINATOR = ','  \n        , STRING_DELIMITER = '\"'\n        , First_Row = 2\n        , USE_TYPE_DEFAULT = FALSE \n        , Encoding = 'UTF8'\n        , PARSER_VERSION = '2.0' )   \n        );  \n\n\n-- csv parser  1\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name='csv_file_format_pv1')      \n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (  \n          FIELD_TERMINATOR = ','  \n        , STRING_DELIMITER = '\"'\n        , First_Row = 2\n        , USE_TYPE_DEFAULT = FALSE \n        , Encoding = 'UTF8'\n        , PARSER_VERSION = '1.0' )   \n        );  \n\n\n\n-- tab separated\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name='tab_separated')      \n  CREATE EXTERNAL FILE FORMAT tab_separated\n    WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (  \n          FIELD_TERMINATOR = '\\t'\n        , STRING_DELIMITER = '\"'\n        , PARSER_VERSION = '2.0'\n        , First_Row = 2\n        , Encoding = 'UTF8'\n          )\n        );\n\n\n\n\n-- parquet \nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name='parquet_file_format')      \n  CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH (  \n      FORMAT_TYPE = PARQUET,\n      DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n      );\n\n\n--delta\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='delta_file_format')\n  CREATE EXTERNAL FILE FORMAT delta_file_format  \n  WITH (  \n        FORMAT_TYPE = DELTA,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw/usp"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/taxi_zone',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.taxi_zone;\n\nEND\nGO\n\n\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/calendar',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.calendar;\n\nEND\nGO\n\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/trip_type',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.trip_type;\n\nEND\nGO\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.vendor') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vendor;\n\n    CREATE EXTERNAL TABLE silver.vendor\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/vendor',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.vendor;\n\nEND\nGO\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.payment_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.payment_type;\n\n    CREATE EXTERNAL TABLE silver.payment_type\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/payment_type',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.vw_payment_type;\n\nEND\nGO\n\n\nCREATE or ALTER PROCEDURE silver.usp_silver_rate_code\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.rate_code') IS NOT NULL\n        DROP EXTERNAL TABLE silver.rate_code;\n\n    CREATE EXTERNAL TABLE silver.rate_code\n        with \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            location = 'silver/rate_code',\n            file_format = parquet_file_format\n        )\n    AS\n    select *\n    from bronze.vw_rate_code;\n\nEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\n-- taxi_zone\n\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    (   location_id SMALLINT ,\n        borough VARCHAR(15) ,\n        zone VARCHAR(50) ,\n        service_zone VARCHAR(15) )  \n    WITH (\n            LOCATION = 'raw/taxi_zone.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format_pv1, --pv1 because rejection possible only for parser 1 not 2. so new external file format created\n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = '/raw/rejections/taxi_zone'\n    );\n\n-- SELECT top 10 * FROM bronze.taxi_zone;\n\n\n\n-- calendar\n\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\n\nCREATE EXTERNAL TABLE bronze.calendar\n    (   \n        date_key int,\n        date date,\n        \"year\" SMALLINT,\n        \"month\" TINYINT,\n        \"day\" TINYINT,\n        day_name VARCHAR(20),\n        \"day_of_year\" SMALLINT,\n        \"week_of_month\" TINYINT,\n        \"week_of_year\" TINYINT,\n        month_name VARCHAR(20),    \n        year_month int, \n        year_week int \n        )  \n    WITH (\n            LOCATION = 'raw/calendar.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format\n    );\n\n-- SELECT top 10 * FROM bronze.calendar;\n\n\n\n-- vendor\n\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\n\nCREATE EXTERNAL TABLE bronze.vendor\n    (   \n        vendor_id TINYINT,\n        vendor_name VARCHAR(50)\n    )  \n    WITH (\n            LOCATION = '/raw/vendor.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format, \n    );\n\n-- SELECT top 10 * FROM bronze.vendor;\n\n\n\n-- trip_type\n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\nCREATE EXTERNAL TABLE bronze.trip_type\n    (   \n        trip_type TINYINT,\n        trip_type_desc VARCHAR(15)\n    )  \n    WITH (\n            LOCATION = '/raw/trip_type.tsv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = tab_separated, \n    );\n\n-- SELECT top 10 * FROM bronze.trip_type;\n\n\n\n\n\n-- trip_data_green_csv\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n    (   \n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n            LOCATION = '/raw/trip_data_green_csv/**',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format, \n    );\n\n-- SELECT top 10 * FROM bronze.trip_data_green_csv;\n\n\n\n\n-- trip_data_green_parquet\n\nIF OBJECT_ID('bronze.trip_data_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_parquet;\n\nCREATE EXTERNAL TABLE bronze.trip_data_parquet\n    (   \n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n            LOCATION = '/raw/trip_data_green_parquet/**',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format, \n    );\n\n-- SELECT top 10 * FROM bronze.trip_data_parquet;\n\n\n\n\n-- trip_data_green_delta\n\nIF OBJECT_ID('bronze.trip_data_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_delta;\n\nCREATE EXTERNAL TABLE bronze.trip_data_delta\n    (   \n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n            LOCATION = '/raw/trip_data_green_delta',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = delta_file_format, \n    );\n\n-- SELECT top 10 * FROM bronze.trip_data_delta;\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "\n-- JSON requires creating views as not possible to source as external data source \n\nUSE nyc_taxi_ldw\nGO\n\n\nDROP VIEW IF EXISTS bronze.vw_rate_code \nGO\n\nCREATE VIEW bronze.vw_rate_code AS\n\n    SELECT \n    rate_code_id,\n    rate_code\n    \n    FROM\n        OPENROWSET (\n            BULK '/raw/rate_code.json',\n            data_source = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b' --necessary\n        ) \n        WITH\n        (\n            jsonDoc NVARCHAR(MAX) \n        )\n        AS [rate_code]\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20) \n        )\n\nGO\n\n\n-- select top 10 * from bronze.vw_rate_code\n-- GO\n\n\n\n\nDROP VIEW IF EXISTS bronze.vw_payment_type \nGO\n\nCREATE VIEW bronze.vw_payment_type AS\n\n    SELECT \n   payment_type,\n   payment_type_desc\nFROM\n    OPENROWSET (\n        BULK '/raw/payment_type.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [payment_type]\n    CROSS APPLY OPENJSON(jsonDoc)\n    with (\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n;\nGO\n\n\n-- select top 10 * from bronze.vw_payment_type\n-- GO\n\n\n\n\n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS bronze.vw_trip_data_green_csv\nGO\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )\n    WITH (\n      VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\n-- SELECT TOP(100) *\n--   FROM bronze.vw_trip_data_green_csv\n-- GO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/taxi_zone',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.taxi_zone;\n\n\n-- select top 10 * from silver.taxi_zone;\n\n\n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\nCREATE EXTERNAL TABLE silver.calendar\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/calendar',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.calendar;\n\n\n-- select top 10 * from silver.calendar;\n\n\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\nGO\n\nCREATE EXTERNAL TABLE silver.trip_type\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/trip_type',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.trip_type;\n\n\n-- select top 10 * from silver.trip_type;\n\n\n\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\nGO\n\nCREATE EXTERNAL TABLE silver.vendor\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/vendor',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.vendor;\n\n\n-- select top 10 * from silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_json_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\nGO\n\nCREATE EXTERNAL TABLE silver.rate_code\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/rate_code',\n        file_format = parquet_file_format\n    )\nAS\nSELECT \n    rate_code_id,\n    rate_code\n    \n    FROM\n        OPENROWSET (\n            BULK '/raw/rate_code.json',\n            data_source = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b' --necessary\n        ) \n        WITH\n        (\n            jsonDoc NVARCHAR(MAX) \n        )\n        AS [rate_code]\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20) \n        );\n\n\n-- select top 10 * from silver.rate_code;\n\n\n\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\nGO\n\nCREATE EXTERNAL TABLE silver.payment_type\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/payment_type',\n        file_format = parquet_file_format\n    )\nAS\nSELECT \n   payment_type,\n   payment_type_desc\nFROM\n    OPENROWSET (\n        BULK '/raw/payment_type.json',\n        data_source = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH\n    (\n       jsonDoc NVARCHAR(MAX) \n    )\n    AS [payment_type]\n    CROSS APPLY OPENJSON(jsonDoc)\n    with (\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    );\n\n\n-- select top 10 * from silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n\n\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n    with \n    (\n        DATA_SOURCE = nyc_taxi_src,\n        location = 'silver/trip_data_green',\n        file_format = parquet_file_format\n    )\nAS\nselect *\nfrom bronze.trip_data_green_csv;\n\n\nselect top 10 * from silver.trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/assignment_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "assignments"
				},
				"content": {
					"query": "\n\n-- create DATABASE calendar;\n\n-- alter database calendar collate Latin1_General_100_CI_AI_SC_UTF8; \n\nuse nyc_taxi_discovery;\n\n-- drop EXTERNAL DATA SOURCE calendar_data;\n\n-- CREATE EXTERNAL DATA SOURCE calendar_data \n-- WITH (\n--     LOCATION = 'abfss://nyc-taxi-data@synapsecourseksdl.dfs.core.windows.net'\n-- )\n\n\n\n\nselect top 10 * from\nOPENROWSET (\n    BULK '/raw/calendar.csv',\n    data_source = 'nyc_taxi_data',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE  \n) as [res];\n\n\n\n\nselect * from\nOPENROWSET (\n    BULK '/raw/calendar.csv',\n    data_source = 'calendar_data',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE  \n) \nWITH\n(\n    date_key int,\n    date date,\n    \"year\" SMALLINT,\n    \"month\" TINYINT,\n    \"day\" TINYINT,\n    day_name VARCHAR(20),\n    \"day_of_year\" SMALLINT,\n    \"week_of_month\" TINYINT,\n    \"week_of_year\" TINYINT,\n    month_name VARCHAR(20),    \n    year_month int, \n    year_week int\n    )\n\nas [res];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query Taxi Zones data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourseksdl.dfs.core.windows.net/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nt_demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d8ddeec5-b6dc-41bd-976f-5ce69000a8e8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coursepool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_taxi_dwh')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}